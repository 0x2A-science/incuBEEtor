//second test of the HDC1080 temperature and humidity sensor
//including the encoder for data input
//including display test code


#include <SPI.h>
#include <Wire.h>
#include "ClosedCube_HDC1080.h"
#include <ESP32Encoder.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <EEPROM.h>



#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const unsigned char BieneMaja [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfb, 0xc0, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x2e, 0x7e, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x36, 0xf7, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xe0, 0x30, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x03, 0x80, 0x30, 0x0f, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 0x0e, 0x00, 0x30, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc9, 0xbf, 0x00, 0x18, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xe9, 0xe3, 0x00, 0x10, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3e, 0xce, 0x00, 0x3f, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x99, 0x8c, 0x00, 0xff, 0xe0, 0xd8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf3, 0x08, 0x01, 0xc0, 0x23, 0x48, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x63, 0x08, 0x0f, 0x0f, 0xb3, 0x0c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x18, 0x7c, 0x19, 0xbe, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x30, 0xee, 0x1c, 0xfe, 0x06, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x18, 0xc4, 0x1c, 0xda, 0x06, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x7f, 0x19, 0x8c, 0x3c, 0xca, 0x02, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1f, 0x0f, 0x0c, 0x3d, 0xea, 0x02, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x86, 0x04, 0x1f, 0xda, 0x02, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0xc6, 0x06, 0x3f, 0xf3, 0x32, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xc2, 0x06, 0x00, 0xe1, 0xe6, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x63, 0x03, 0x00, 0xc7, 0xcc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x23, 0x03, 0x00, 0x87, 0x1c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x31, 0x07, 0x80, 0x02, 0x37, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x11, 0x87, 0xe0, 0x06, 0x3d, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x19, 0x8f, 0xff, 0xf6, 0x39, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x18, 0xcf, 0xff, 0x0d, 0x33, 0x7c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3f, 0xf8, 0xef, 0xf0, 0x1b, 0x63, 0xcc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xff, 0xff, 0xe0, 0x37, 0xc0, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe3, 0xff, 0x7f, 0x00, 0xff, 0x81, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0xe3, 0xf8, 0x3f, 0xff, 0xbf, 0x05, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x9f, 0xc3, 0xfc, 0x1f, 0x7f, 0xe0, 0x0d, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0xc3, 0xfc, 0x06, 0x03, 0x80, 0x7b, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x83, 0xfe, 0x06, 0x1f, 0xfc, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x38, 0x19, 0x83, 0xff, 0x07, 0xff, 0x7f, 0x07, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf1, 0xb3, 0x83, 0xff, 0x0c, 0x00, 0x01, 0xfb, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x81, 0x03, 0x83, 0xff, 0xe8, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x81, 0x07, 0x83, 0xff, 0xf8, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x83, 0x8f, 0x81, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xef, 0xff, 0x80, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0x7c, 0x63, 0xc0, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0xe0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x06, 0x01, 0xc6, 0xf0, 0x0f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x81, 0xff, 0xfc, 0x3c, 0x30, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x1f, 0xf0, 0x18, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


ESP32Encoder encoder;

ClosedCube_HDC1080 hdc1080;


float temp;
float humid;
char tempchar[5];
char humidchar[5];


unsigned int set_temp;
unsigned int set_humid;

unsigned int set_temp_old = 0;
unsigned int set_humid_old = 0;

unsigned int temp_hysteresis = 2;

int enc_inc = 0;
int enc_button_selector = 0;


#define HEATER_UPPER 12
#define HEATER_LOWER 32
#define FAN 14
#define ENC_BUTTON 27
#define ENC_DT 26
#define ENC_CLK 25

void setup()
{
  Serial.begin(115200);
  EEPROM.begin(16);
  //set output pin modes
  pinMode(HEATER_UPPER, OUTPUT);
  pinMode(HEATER_LOWER, OUTPUT);
  pinMode(FAN, OUTPUT);

  //read stored temperature and humidity values from EEPROM
  set_temp = EEPROM.read(0);
  set_humid = EEPROM.read(1);
  Serial.println(EEPROM.read(0));

  //DISPLAY
 // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(WHITE); // Draw white text
  display.setCursor(0, 52);
  display.write("by mashuptwice");
  display.display();
  delay(1000);
  //HDC1080
  // Default settings for HDC1080:
  // - Heater off
  // - 14 bit Temperature and Humidity Measurement Resolutions
  hdc1080.begin(0x40);
  Serial.print("Manufacturer ID=0x");
  Serial.println(hdc1080.readManufacturerId(), HEX); // 0x5449 ID of Texas Instruments
  Serial.print("Device ID=0x");
  Serial.println(hdc1080.readDeviceId(), HEX); // 0x1050 ID of the device
  
  
  //ENCODER
  // Enable the weak pull up resistors
  ESP32Encoder::useInternalWeakPullResistors=UP;
  // use pin 19 and 18 for the first encoder
  encoder.attachHalfQuad(ENC_CLK, ENC_DT);
  // set starting count value after attaching
  encoder.setCount(0);
  Serial.println("Encoder Start = " + String((int32_t)encoder.getCount()));

  //ENCODER BUTTON INTERRUPT
  pinMode(ENC_BUTTON, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(ENC_BUTTON), enc_button_ISR, RISING);

  
  
  // Clear the buffer.
  display.clearDisplay();
  // Display bitmap
  display.drawBitmap(0, 0,  BieneMaja, 128, 64, WHITE);
  display.display();
  delay(2000);
}
 
void loop()
{
  //get temp and humid and save it to var
  temp = hdc1080.readTemperature();
  humid = hdc1080.readHumidity();
  /*
  //print raw temperature to serial
  Serial.println(hdc1080.readTemperature());
  */
  //round values to 1 decimal
  temp = round(temp*10)/10;
  humid = round(humid*10)/10;

  /*
  //print temp and humid to serial out
  Serial.print("T: ");
  Serial.print(temp);
  Serial.println("");
  Serial.print("H: ");
  Serial.print(humid);
  Serial.println("");
  */

  //print static text to display
  display.clearDisplay();       //clear display buffer
  //display.setFont(&FreeMonoBold5pt7b);
  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.print("TEMP.");
  display.setCursor(64, 0);
  display.print("FEUCHT.");
  display.setCursor(32, 10);
 
 
  //print temperature to display
  //convert int to char
  display.setCursor(2, 12);
  dtostrf(temp, 3, 1, tempchar);
  display.print(tempchar);
  display.print((char)247);
  display.print("C");

  //print humidity to display
  display.setCursor(64, 12);
  dtostrf(humid, 3, 1, humidchar);
  display.print(humidchar);
  display.print("%");

  //print set temp and humid to display
  display.setCursor(2, 30);
  display.print(set_temp);
  display.print((char)247);
  display.print("C");

  display.setCursor(64, 30);
  display.print(set_humid);
  display.print("%");

  /*
  //print encoder selector var to display for debugging
  display.setCursor(0, 50);
  display.print(enc_button_selector);
  */


  //get data from encoder as incremental value, dirty fix for using one encoder for two values
  enc_inc = encoder.getCount();

  //mode selector for data input, switches between temperature and humidity
    if (enc_button_selector == 0)
    {
      //draw rectangle to show selected field
      display.drawRect(0, 28, 30, 12, 1);
      
      if (enc_inc != 0)
      { 
        set_temp = constrain(set_temp + enc_inc / 2, 0, 60);
        
        enc_inc = 0;
        encoder.setCount(0);
        
        Serial.println("EEPROM write temp");
        EEPROM.write(0, set_temp);
        EEPROM.commit();
      }
    }
    else if (enc_button_selector == 1)
    {
      //draw rectangle to show selected field
      display.drawRect(62, 28, 30, 12, 1);
      
      //added dirty fix for some bouncing problem with the encoder, which only started to happen after final assembly...
      if (enc_inc != 0)
      {
        set_humid = constrain(set_humid + enc_inc / 2, 0, 100);
        
        enc_inc = 0;
        encoder.setCount(0);
     
        Serial.println("EEPROM write humid");
        EEPROM.write(1, set_humid);
        EEPROM.commit();
        }
      }

  
  display.display();


  //control routine for heater and fan
  if (round(temp) < set_temp)
  {
    
    //fan on
    digitalWrite(FAN, LOW);
    //both heater off
    digitalWrite(HEATER_UPPER, HIGH);
    digitalWrite(HEATER_LOWER, HIGH);
    }
  else if (round(temp) > set_temp)
  {
    
    //fan off
    digitalWrite(FAN, HIGH);
    //both heater on
    digitalWrite(HEATER_UPPER, LOW);
    digitalWrite(HEATER_LOWER, LOW);
    }
  else if (round(temp) == set_temp)
  {
    if (round(humid) > set_humid)
    {
      digitalWrite(FAN, LOW);
      digitalWrite(HEATER_UPPER, HIGH);
      digitalWrite(HEATER_LOWER, HIGH);
    }
    else if (round(humid) < set_humid)
    {
      digitalWrite(FAN, HIGH);
      digitalWrite(HEATER_UPPER, HIGH);
      digitalWrite(HEATER_LOWER, LOW);
    }
  }
  /*
  if (temp+1 > set_temp)
  {
    digitalWrite(FAN, HIGH);
    }
  else if  (temp < set_temp)
  {
    digitalWrite(FAN, LOW);
    }
  else if (temp == set_temp)
  {
    digitalWrite(FAN, LOW);
    }
  */
  
    /*
  else if (temp == set_temp)
  {
    if (humid < set_humid)
    {
      //set lower heater on to rise humidity
      digitalWrite(HEATER_LOWER, HIGH);
      //set fan off
      digitalWrite(FAN, LOW);
      }
    if (humid > set_humid)
    {
      //set lower heater off
      digitalWrite(HEATER_LOWER, LOW);
      //set fan on to lower humidity
      digitalWrite(FAN, HIGH);
      }
   
    }
  */
 
  //set the desired temperature via encoder and constrain it to a useful range
  
  //Serial.println(set_temp);
  
  delay(100);
}


//interrupt service routine for encoder button/mode selector
void enc_button_ISR()
{
  Serial.println("ISR triggered");
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();
  if (interrupt_time - last_interrupt_time > 300)
  {
    enc_button_selector++;
    if (enc_button_selector >= 2)
      {
        enc_button_selector = 0;
      }
    
  }
  last_interrupt_time = interrupt_time;

}
